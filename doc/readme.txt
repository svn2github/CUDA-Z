
ReadMe.txt
==========

This small document may answer some of your questions about what you need
for using and building CUDA-Z.

What is CUDA-Z?
---------------

CUDA-Z is a small simple utility showing information about CUDA devices
installed in your PC/notebook or whatever you call computer.

What is CUDA?
-------------

CUDA is a NVIDIA's Compute Unified Device Architecture. You can get more
information about it from page CUDA ZONE at NVIDIA's website
http://www.nvidia.com/object/cuda_home.html

What is CUDA-enabled device?
----------------------------

It is simple... It is a device that supports CUDA. NVIDIA call it 
"CUDA-enabled products".
http://www.nvidia.com/object/cuda_learn_products.html

What I need to run CUDA-Z utility?
----------------------------------

You need CUDA-enabled device and CUDA driver for your OS.
Download CUDA-Z binary package from http://cuda-z.sourceforge.net/,
run it and have fun!

What I need for building CUDA-Z from sources?
---------------------------------------------

WINDOWS Platform

In Windows you need:
1. Microsoft Visual C++ 2005 or 2008. Having Express edition is enough.
   Unfortunately you can't compile CUDA with MinGW32 or Cygwin because NVIDIA
   doesn't support any present port of g++ compiler in Windows environment.
   Install of latest Windows Platform SDK is also recommended.
   http://www.microsoft.com/express/download/default.aspx
2. Qt 4.4.0 (OpenSource) or later version. You should build Qt with
   Microsoft Visual C++ 2005/2008 (Qt built with MinGW will not be linked with
   code generated by MS Visual C++).
   http://qt.nokia.com/downloads
   The best way to distribute CUDA-Z is to make it as much as possible DLLs
   independent. To reach this goal you should build Qt static.
   Read following links to make it right.
   http://wiki.qtcentre.org/index.php?title=Building_static_Qt_on_Windows
   http://wiki.qtcentre.org/index.php?title=Building_static_applications
   Additionally, it's good to make our binary file independent from
   msvc?80.dll/msvc?90.dll. To make this you should change some variables in
   configuration of Qt: mkspecs/win32-msvc2005/qmake.conf:
   QMAKE_CFLAGS_RELEASE	= -O2 -MT
   QMAKE_CFLAGS_DEBUG	= -Zi -MTd
   QMAKE_LFLAGS_WINDOWS	= /SUBSYSTEM:WINDOWS
   Keep in mind that compiler configuuration file may change with later
   versions of compiler or Qt.
   Build Qt with new configuration file again...
   IMPORTANT: CUDA-Z package release must be linked with static Qt!
   The smallest version of Qt I could ever biuld was configured with following
   command line (Note: it was Visual C++ 2005 Express and Qt 4.4.x):
   # configure.exe -release -static -no-exceptions -no-accessibility
                   -no-stl -no-sql-sqlite -no-qt3support -no-opengl
                   -platform win32-msvc2005 -no-gif -no-libmng -no-libtiff
                   -no-libjpeg -vcproj -dsp -no-incredibuild-xge -no-rtti
                   -no-3dnow -no-sse -no-sse2 -no-openssl -no-dbus
                   -no-phonon -no-webkit -no-style-plastique
                   -no-style-cleanlooks -no-style-motif -no-style-cde
3. CUDA driver and CUDA toolkit installed on your computer.
   http://www.nvidia.com/object/cuda_get.html (v. 3.0+)
   After generation of EXE file, it still needs cudart.dll... :-(
   TODO: Rid of CUDA Runtime library and use driver API instead.

Now you have enough tools for building CUDA-Z. I would recommend you to add
all binary folders of installed tools to system PATH variable or tovsvars32.bat
located in your "X:\Programme\Microsoft Visual Studio 8\Common7\Tools\".
Now open Visual Studio 2005/2008 Command Prompt, go to folder where you have
placed source code of CUDA-Z and type:
   > qmake
   > nmake
If no error occurs you will find cuda-z.exe in ./bin folder.

To make binary release package for windows you should additionally install
NSIS 2.37 (or higher) and add it's folder in system PATH variable.
Copy library cudart.dll to ./bin folder from CUDA toolkit bin folder.
Than you can generate package by calling in
Visual Studio 2005/2008 Command Prompt:
   > nmake pkg-win32

LINUX Platform

You need coplete C++ build environment (including g++, binutils, make),
Qt development package or source code, NVIDIA driver and toolkit (v. 2.0+)
for your linux architecture. Then download a source code from our website,
unpack and type following in source code directory:
   # qmake && make
If no error occurs you will find cuda-z binary file in ./bin folder.

In case if you want to build redistributable package with CUDA-Z type
additionally:
   # make pkg-linux

APPLE Platform

I didn't have chance to try to build CUDA-Z in MacOS X because of lack of
original Apple hardware. Build of CUDA-Z in MacOS X shouldn't be too
complicated for any C/C++-developer. You can get gcc and g++ from OS
distributer (XCode tools). You still have to download or build Qt from NOKIA
and CUDA toolkit package from NVIDIA website. Have fun! :-)
Give me your feedback will it work there?

Happy hacking!

--
WBR,
AG
