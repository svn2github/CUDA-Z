
ReadMe.txt
==========

This small document may answer some of your questions about what you need
for using and building CUDA-Z.

What is CUDA-Z?
---------------

CUDA-Z is a small simple utility showing information about CUDA devices
installed in your PC/notebook or whatever you call computer.

What is CUDA?
-------------

CUDA is a NVIDIA's Compute Unified Device Architecture. You can get more
information about it from page CUDA ZONE at NVIDIA's website
http://www.nvidia.com/object/cuda_home.html

What is CUDA-enabled device?
----------------------------

It is simple... It is a device that supports CUDA. NVIDIA call it 
"CUDA-enabled products".
http://www.nvidia.com/object/cuda_learn_products.html

What I need to run CUDA-Z utility?
----------------------------------

You need CUDA-enabled device and CUDA driver for your OS.
Download CUDA-Z binary package from http://cuda-z.sourceforge.net/,
run it and have fun!

What I need for building CUDA-Z from sources?
---------------------------------------------

WINDOWS Platform
................

In Windows you need:
1. Microsoft Visual C++ 2008/2010/2012. Having Express edition is enough.
   Unfortunately you can't compile CUDA with MinGW32 or Cygwin because NVIDIA
   doesn't support any present port of g++ compiler in Windows environment.
   Install of latest Windows Platform SDK is also recommended.
   http://www.microsoft.com/express/download/default.aspx
2. Qt 4.7.0 (OpenSource) or later version. You should build Qt with
   Microsoft Visual C++ 2008/2010/2012 (Qt built with MinGW will not be linked with
   code generated by MS Visual C++).
   http://qt-project.org/downloads
   The best way to distribute CUDA-Z is to make it as much as possible DLLs
   independent. To reach this goal you should build Qt static.
   Read following links to make it right.
   http://wiki.qtcentre.org/index.php?title=Building_static_Qt_on_Windows
   http://wiki.qtcentre.org/index.php?title=Building_static_applications
   Additionally, it's good to make our binary file independent from
   msvc?90.dll/msvc?100.dll/msvc?110.dll. To make this you should change some variables in
   configuration of Qt: mkspecs/win32-msvc2010/qmake.conf:
   QMAKE_CFLAGS_RELEASE	= -O2 -MT
   QMAKE_CFLAGS_DEBUG	= -Zi -MTd
   QMAKE_LFLAGS_WINDOWS	= /SUBSYSTEM:WINDOWS
   Keep in mind that compiler configuration file may change with later
   versions of compiler or Qt.
   Build Qt with new configuration file again...
   IMPORTANT: CUDA-Z package release must be linked with static Qt!
   The smallest version of Qt I could ever build was configured with following
   command line (Note: it was Visual C++ 2010 Express and Qt 4.8.x):
   # configure.exe -release -static -no-exceptions -no-accessibility
                   -no-stl -no-sql-sqlite -no-qt3support -no-opengl
                   -platform win32-msvc2010 -no-gif -no-libmng -no-libtiff
                   -no-libjpeg -vcproj -dsp -no-incredibuild-xge -no-rtti
                   -no-3dnow -no-sse -no-sse2 -no-openssl -no-dbus
                   -no-phonon -no-webkit -no-style-plastique
                   -no-style-cleanlooks -no-style-motif -no-style-cde
3. CUDA driver and CUDA toolkit installed on your computer.
   http://www.nvidia.com/object/cuda_get.html (v. 5.5+)
   After generation of EXE file, it still needs cudart.dll... :-(
   TODO: Rid of CUDA Runtime library and use driver API instead.
4. You also need an installation of perl for Windows. ActivePerl is good
   enough for our purposes. http://www.activestate.com/activeperl
5. Subversion CLI client or TortoiseSVN with CLI client.
   http://subversion.tigris.org/ http://tortoisesvn.net/

Now you have enough tools for building CUDA-Z. I would recommend you to add
all binary folders of installed tools to system PATH variable or tovsvars32.bat
located in your "X:\Programme\Microsoft Visual Studio <n>\Common7\Tools\".
Now open Visual Studio Command Prompt, go to folder where you have
placed source code of CUDA-Z and type:
   > qmake
   > nmake
If no error occurs you will find cuda-z.exe in ./bin folder.

Than you can generate package by calling in
Visual Studio Command Prompt:
   > nmake pkg-win32

LINUX Platform
..............

You need complete C++ build environment (including g++, binutils, make),
Subversion and perl packages, Qt development package or source code,
NVIDIA driver and toolkit (v. 5.5+) for your linux architecture.
If you have all required, go and download a source code from our website,
unpack and type following in source code directory:
   # qmake && make
If no error occurs you will find cuda-z binary file in ./bin folder.

In case if you want to build redistributable package with CUDA-Z type
additionally:
   # make pkg-linux

It's a good idea to create cuda-z binary for redistributable package using
static version of Qt instead of relaying on compatibility of dynamic version
shipped with all different linux distributions.

APPLE Platform
..............

I've made few steps to let CUDA-Z run on Mac OS X (SnowLeo). This port is in
alpha stage... So, don't be too optimistic here because I still have no good
Mac HW for tests.
To build CUDA-Z in Mac OS X you should install the Developers package
(XCode tools). You still have to download (or/and build) Qt from Qt-Project
and CUDA driver and toolkit packages from NVIDIA website.
General build process for Mac OS X is identical to linux version.

Happy hacking!

What CUDA-Z's license?
----------------------

License GPLv3 http://www.gnu.org/licenses/gpl-3.0.html

Who is an author?
-----------------

Andriy Golovnya <andriy.golovnya@gmail.com> http://redscorp.net/

--
WBR,
AG
